// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/<MessageList /> Should display no data message 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="no-message"
>
    No message here yet!
</div>,
  "nodes": Array [
    <div
      className="no-message"
>
      No message here yet!
</div>,
  ],
  "options": Object {},
  "renderer": null,
  "root": ShallowWrapper {
    "complexSelector": ComplexSelector {
      "buildPredicate": [Function],
      "childrenOfNode": [Function],
      "findWhereUnwrapped": [Function],
    },
    "length": 1,
    "node": <div
      className="message-list-wrapper"
>
      <div
            className="counter"
      >
            0
             
            item
      </div>
      <ul
            className="message-list"
      >
            <div
                  className="no-message"
            >
                  No message here yet!
            </div>
            <div />
      </ul>
</div>,
    "nodes": Array [
      <div
        className="message-list-wrapper"
>
        <div
                className="counter"
        >
                0
                 
                item
        </div>
        <ul
                className="message-list"
        >
                <div
                        className="no-message"
                >
                        No message here yet!
                </div>
                <div />
        </ul>
</div>,
    ],
    "options": Object {},
    "renderer": ReactShallowRenderer {
      "_instance": ShallowComponentWrapper {
        "_calledComponentWillUnmount": false,
        "_compositeType": 1,
        "_context": Object {},
        "_currentElement": <MessageList
          viewer={
                    Object {
                              "messages": Object {
                                "edges": Array [],
                              },
                              "totalCount": 0,
                            }
          }
/>,
        "_debugID": 5,
        "_hostContainerInfo": null,
        "_hostParent": null,
        "_instance": MessageList {
          "_reactInternalInstance": [Circular],
          "context": Object {},
          "noDataBlock": [Function],
          "props": Object {
            "viewer": Object {
              "messages": Object {
                "edges": Array [],
              },
              "totalCount": 0,
            },
          },
          "refs": Object {},
          "scrollToBottom": [Function],
          "state": null,
          "updater": Object {
            "enqueueCallback": [Function],
            "enqueueCallbackInternal": [Function],
            "enqueueElementInternal": [Function],
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
            "validateCallback": [Function],
          },
        },
        "_mountOrder": 3,
        "_pendingCallbacks": null,
        "_pendingElement": null,
        "_pendingForceUpdate": false,
        "_pendingReplaceState": false,
        "_pendingStateQueue": null,
        "_renderedComponent": NoopInternalComponent {
          "_currentElement": <div
            className="message-list-wrapper"
>
            <div
                        className="counter"
            >
                        0
                         
                        item
            </div>
            <ul
                        className="message-list"
            >
                        <div
                                    className="no-message"
                        >
                                    No message here yet!
                        </div>
                        <div />
            </ul>
</div>,
          "_debugID": 6,
          "_renderedOutput": <div
            className="message-list-wrapper"
>
            <div
                        className="counter"
            >
                        0
                         
                        item
            </div>
            <ul
                        className="message-list"
            >
                        <div
                                    className="no-message"
                        >
                                    No message here yet!
                        </div>
                        <div />
            </ul>
</div>,
        },
        "_renderedNodeType": 0,
        "_rootNodeID": 0,
        "_topLevelWrapper": null,
        "_updateBatchNumber": null,
        "_warnedAboutRefsInRender": false,
      },
      "getRenderOutput": [Function],
      "render": [Function],
    },
    "root": [Circular],
    "unrendered": <MessageList
      viewer={
            Object {
                  "messages": Object {
                    "edges": Array [],
                  },
                  "totalCount": 0,
                }
      }
/>,
  },
  "unrendered": null,
}
`;

exports[`components/<MessageList /> Should render 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="message-list-wrapper"
>
    <div
        className="counter"
    >
        2
         
        items
    </div>
    <ul
        className="message-list"
    >
        <Relay(Message)
            message={
                Object {
                    "createdAt": "some-date",
                    "id": "some-id",
                    "text": "some-text",
                  }
            }
            viewer={
                Object {
                    "messages": Object {
                      "edges": Array [
                        Object {
                          "node": Object {
                            "createdAt": "some-date",
                            "id": "some-id",
                            "text": "some-text",
                          },
                        },
                        Object {
                          "node": Object {
                            "createdAt": "some-date2",
                            "id": "some-id2",
                            "text": "some-text2",
                          },
                        },
                      ],
                    },
                    "totalCount": 2,
                  }
            }
        />
        <Relay(Message)
            message={
                Object {
                    "createdAt": "some-date2",
                    "id": "some-id2",
                    "text": "some-text2",
                  }
            }
            viewer={
                Object {
                    "messages": Object {
                      "edges": Array [
                        Object {
                          "node": Object {
                            "createdAt": "some-date",
                            "id": "some-id",
                            "text": "some-text",
                          },
                        },
                        Object {
                          "node": Object {
                            "createdAt": "some-date2",
                            "id": "some-id2",
                            "text": "some-text2",
                          },
                        },
                      ],
                    },
                    "totalCount": 2,
                  }
            }
        />
        <div />
    </ul>
</div>,
  "nodes": Array [
    <div
      className="message-list-wrapper"
>
      <div
            className="counter"
      >
            2
             
            items
      </div>
      <ul
            className="message-list"
      >
            <Relay(Message)
                  message={
                        Object {
                              "createdAt": "some-date",
                              "id": "some-id",
                              "text": "some-text",
                            }
                  }
                  viewer={
                        Object {
                              "messages": Object {
                                "edges": Array [
                                  Object {
                                    "node": Object {
                                      "createdAt": "some-date",
                                      "id": "some-id",
                                      "text": "some-text",
                                    },
                                  },
                                  Object {
                                    "node": Object {
                                      "createdAt": "some-date2",
                                      "id": "some-id2",
                                      "text": "some-text2",
                                    },
                                  },
                                ],
                              },
                              "totalCount": 2,
                            }
                  }
            />
            <Relay(Message)
                  message={
                        Object {
                              "createdAt": "some-date2",
                              "id": "some-id2",
                              "text": "some-text2",
                            }
                  }
                  viewer={
                        Object {
                              "messages": Object {
                                "edges": Array [
                                  Object {
                                    "node": Object {
                                      "createdAt": "some-date",
                                      "id": "some-id",
                                      "text": "some-text",
                                    },
                                  },
                                  Object {
                                    "node": Object {
                                      "createdAt": "some-date2",
                                      "id": "some-id2",
                                      "text": "some-text2",
                                    },
                                  },
                                ],
                              },
                              "totalCount": 2,
                            }
                  }
            />
            <div />
      </ul>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <MessageList
        viewer={
                Object {
                        "messages": Object {
                          "edges": Array [
                            Object {
                              "node": Object {
                                "createdAt": "some-date",
                                "id": "some-id",
                                "text": "some-text",
                              },
                            },
                            Object {
                              "node": Object {
                                "createdAt": "some-date2",
                                "id": "some-id2",
                                "text": "some-text2",
                              },
                            },
                          ],
                        },
                        "totalCount": 2,
                      }
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": MessageList {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "noDataBlock": [Function],
        "props": Object {
          "viewer": Object {
            "messages": Object {
              "edges": Array [
                Object {
                  "node": Object {
                    "createdAt": "some-date",
                    "id": "some-id",
                    "text": "some-text",
                  },
                },
                Object {
                  "node": Object {
                    "createdAt": "some-date2",
                    "id": "some-id2",
                    "text": "some-text2",
                  },
                },
              ],
            },
            "totalCount": 2,
          },
        },
        "refs": Object {},
        "scrollToBottom": [Function],
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="message-list-wrapper"
>
          <div
                    className="counter"
          >
                    2
                     
                    items
          </div>
          <ul
                    className="message-list"
          >
                    <Relay(Message)
                              message={
                                        Object {
                                                  "createdAt": "some-date",
                                                  "id": "some-id",
                                                  "text": "some-text",
                                                }
                              }
                              viewer={
                                        Object {
                                                  "messages": Object {
                                                    "edges": Array [
                                                      Object {
                                                        "node": Object {
                                                          "createdAt": "some-date",
                                                          "id": "some-id",
                                                          "text": "some-text",
                                                        },
                                                      },
                                                      Object {
                                                        "node": Object {
                                                          "createdAt": "some-date2",
                                                          "id": "some-id2",
                                                          "text": "some-text2",
                                                        },
                                                      },
                                                    ],
                                                  },
                                                  "totalCount": 2,
                                                }
                              }
                    />
                    <Relay(Message)
                              message={
                                        Object {
                                                  "createdAt": "some-date2",
                                                  "id": "some-id2",
                                                  "text": "some-text2",
                                                }
                              }
                              viewer={
                                        Object {
                                                  "messages": Object {
                                                    "edges": Array [
                                                      Object {
                                                        "node": Object {
                                                          "createdAt": "some-date",
                                                          "id": "some-id",
                                                          "text": "some-text",
                                                        },
                                                      },
                                                      Object {
                                                        "node": Object {
                                                          "createdAt": "some-date2",
                                                          "id": "some-id2",
                                                          "text": "some-text2",
                                                        },
                                                      },
                                                    ],
                                                  },
                                                  "totalCount": 2,
                                                }
                              }
                    />
                    <div />
          </ul>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="message-list-wrapper"
>
          <div
                    className="counter"
          >
                    2
                     
                    items
          </div>
          <ul
                    className="message-list"
          >
                    <Relay(Message)
                              message={
                                        Object {
                                                  "createdAt": "some-date",
                                                  "id": "some-id",
                                                  "text": "some-text",
                                                }
                              }
                              viewer={
                                        Object {
                                                  "messages": Object {
                                                    "edges": Array [
                                                      Object {
                                                        "node": Object {
                                                          "createdAt": "some-date",
                                                          "id": "some-id",
                                                          "text": "some-text",
                                                        },
                                                      },
                                                      Object {
                                                        "node": Object {
                                                          "createdAt": "some-date2",
                                                          "id": "some-id2",
                                                          "text": "some-text2",
                                                        },
                                                      },
                                                    ],
                                                  },
                                                  "totalCount": 2,
                                                }
                              }
                    />
                    <Relay(Message)
                              message={
                                        Object {
                                                  "createdAt": "some-date2",
                                                  "id": "some-id2",
                                                  "text": "some-text2",
                                                }
                              }
                              viewer={
                                        Object {
                                                  "messages": Object {
                                                    "edges": Array [
                                                      Object {
                                                        "node": Object {
                                                          "createdAt": "some-date",
                                                          "id": "some-id",
                                                          "text": "some-text",
                                                        },
                                                      },
                                                      Object {
                                                        "node": Object {
                                                          "createdAt": "some-date2",
                                                          "id": "some-id2",
                                                          "text": "some-text2",
                                                        },
                                                      },
                                                    ],
                                                  },
                                                  "totalCount": 2,
                                                }
                              }
                    />
                    <div />
          </ul>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <MessageList
    viewer={
        Object {
            "messages": Object {
              "edges": Array [
                Object {
                  "node": Object {
                    "createdAt": "some-date",
                    "id": "some-id",
                    "text": "some-text",
                  },
                },
                Object {
                  "node": Object {
                    "createdAt": "some-date2",
                    "id": "some-id2",
                    "text": "some-text2",
                  },
                },
              ],
            },
            "totalCount": 2,
          }
    }
/>,
}
`;
